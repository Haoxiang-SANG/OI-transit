<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.template.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>
	
<template>
<title>单源最短路 (Dijkstra)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#include</span> <span class="sh_string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span>
<span class="sh_keyword">using</span> __gnu_pbds<span class="sh_symbol">::</span>priority_queue<span class="sh_symbol">;</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">_</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> to<span class="sh_symbol">,</span> dist<span class="sh_symbol">;</span>
    <span class="sh_function">_</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> to0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">int</span> dist0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">):</span> <span class="sh_function">to</span><span class="sh_symbol">(</span>to0<span class="sh_symbol">),</span> <span class="sh_function">dist</span><span class="sh_symbol">(</span>dist0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
    <span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> _ <span class="sh_symbol">&amp;</span>b<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> dist <span class="sh_symbol">&gt;</span> b<span class="sh_symbol">.</span>dist<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

priority_queue <span class="sh_symbol">&lt;</span>_<span class="sh_symbol">&gt;</span> pq<span class="sh_symbol">;</span>

<span class="sh_type">void</span> <span class="sh_function">Dijkstra</span><span class="sh_symbol">(</span><span class="sh_type">int</span> start<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> i<span class="sh_symbol">;</span> _ t<span class="sh_symbol">;</span>
    pq<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_function">_</span><span class="sh_symbol">(</span>start<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">));</span>
    <span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> V<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> d<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">==</span> start <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> INF<span class="sh_symbol">);</span>
    <span class="sh_keyword">while</span><span class="sh_symbol">(!</span>pq<span class="sh_symbol">.</span><span class="sh_function">empty</span><span class="sh_symbol">())</span><span class="sh_cbracket">{</span>
        t <span class="sh_symbol">=</span> pq<span class="sh_symbol">.</span><span class="sh_function">top</span><span class="sh_symbol">();</span> pq<span class="sh_symbol">.</span><span class="sh_function">pop</span><span class="sh_symbol">();</span>
        <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>used<span class="sh_symbol">[</span>t<span class="sh_symbol">.</span>to<span class="sh_symbol">])</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span> used<span class="sh_symbol">[</span>t<span class="sh_symbol">.</span>to<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
        <span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>t<span class="sh_symbol">.</span>to<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
            <span class="sh_keyword">if</span><span class="sh_symbol">(</span>t<span class="sh_symbol">.</span>dist <span class="sh_symbol">+</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>w <span class="sh_symbol">&lt;</span> d<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">])</span><span class="sh_cbracket">{</span>
                d<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> t<span class="sh_symbol">.</span>dist <span class="sh_symbol">+</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>w<span class="sh_symbol">;</span>
                pq<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_function">_</span><span class="sh_symbol">(</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">,</span> d<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">]));</span>
            <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
