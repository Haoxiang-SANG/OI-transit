<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.simplify.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>
	
<template>
<title>直线及其函数</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">line</span><span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> A<span class="sh_symbol">,</span> B<span class="sh_symbol">,</span> C<span class="sh_symbol">;</span> <span class="sh_comment">// Ax + By + C = 0</span>
	<span class="sh_function">line</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> A0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> B0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> C0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">):</span> <span class="sh_function">A</span><span class="sh_symbol">(</span>A0<span class="sh_symbol">),</span> <span class="sh_function">B</span><span class="sh_symbol">(</span>B0<span class="sh_symbol">),</span> <span class="sh_function">C</span><span class="sh_symbol">(</span>C0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(</span>A<span class="sh_symbol">,</span> B<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_comment">// substitute a point for a line.</span>
<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">substitute</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>P<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>l<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> l<span class="sh_symbol">.</span>A <span class="sh_symbol">*</span> P<span class="sh_symbol">.</span>x <span class="sh_symbol">+</span> l<span class="sh_symbol">.</span>B <span class="sh_symbol">*</span> P<span class="sh_symbol">.</span>y <span class="sh_symbol">+</span> l<span class="sh_symbol">.</span>C<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// return a line through 2 points.</span>
<span class="sh_keyword">inline</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span><span class="sh_function">getLine</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">line</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span>y <span class="sh_symbol">-</span> v<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> v<span class="sh_symbol">.</span>x <span class="sh_symbol">-</span> u<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> u <span class="sh_symbol">^</span> v<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// return the intersection of 2 lines.</span>
<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_function">intersection</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> Det <span class="sh_symbol">=</span> <span class="sh_number">1.0</span> <span class="sh_symbol">/</span> <span class="sh_symbol">(</span>u<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_symbol">^</span> v<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">());</span>
	<span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span>B <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span>C <span class="sh_symbol">-</span> u<span class="sh_symbol">.</span>C <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span>B<span class="sh_symbol">,</span> u<span class="sh_symbol">.</span>C <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span>A <span class="sh_symbol">-</span> u<span class="sh_symbol">.</span>A <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span>C<span class="sh_symbol">)</span> <span class="sh_symbol">*</span> Det<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// return true if u // v.</span>
<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">parallel</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> P <span class="sh_symbol">=</span> u<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_symbol">^</span> v<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">();</span>
	<span class="sh_keyword">return</span> <span class="sh_symbol">-</span>eps <span class="sh_symbol">&lt;</span> P <span class="sh_symbol">&amp;&amp;</span> P <span class="sh_symbol">&lt;</span> eps<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// return true if u is perpendicular to v.</span>
<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">perpendicular</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> P <span class="sh_symbol">=</span> u<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">();</span>
	<span class="sh_keyword">return</span> <span class="sh_symbol">-</span>eps <span class="sh_symbol">&lt;</span> P <span class="sh_symbol">&amp;&amp;</span> P <span class="sh_symbol">&lt;</span> eps<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// return the perpendicular bisector of (the segment which through) 2 given points.</span>
<span class="sh_keyword">inline</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span><span class="sh_function">getPerBisector</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">line</span><span class="sh_symbol">(</span>v<span class="sh_symbol">.</span>x <span class="sh_symbol">-</span> u<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> v<span class="sh_symbol">.</span>y <span class="sh_symbol">-</span> u<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> <span class="sh_number">0.5</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span>u<span class="sh_symbol">.</span><span class="sh_function">norm2</span><span class="sh_symbol">()</span> <span class="sh_symbol">-</span> v<span class="sh_symbol">.</span><span class="sh_function">norm2</span><span class="sh_symbol">()));</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// return the symmetry point of a point about given line.</span>
<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_function">getSymmetry</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>P<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>l<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> K <span class="sh_symbol">=</span> <span class="sh_function">substitute</span><span class="sh_symbol">(</span>P<span class="sh_symbol">,</span> l<span class="sh_symbol">)</span> <span class="sh_symbol">*</span> <span class="sh_number">2.0</span> <span class="sh_symbol">/</span> l<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">().</span><span class="sh_function">norm2</span><span class="sh_symbol">();</span>
	<span class="sh_keyword">return</span> P <span class="sh_symbol">-</span> l<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_symbol">*</span> K<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
