<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.simplify.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>

<template>
<title>虚树 (深度栈算法)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">idcmp</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> A<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> B<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> Tree<span class="sh_symbol">::</span>id<span class="sh_symbol">[</span>A<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> Tree<span class="sh_symbol">::</span>id<span class="sh_symbol">[</span>B<span class="sh_symbol">];</span><span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">build</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">using</span> Tree<span class="sh_symbol">::</span>dep<span class="sh_symbol">;</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span>
	<span class="sh_function">memcpy</span><span class="sh_symbol">(</span>_h<span class="sh_symbol">,</span> h<span class="sh_symbol">,</span> m <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
	std<span class="sh_symbol">::</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>h<span class="sh_symbol">,</span> h <span class="sh_symbol">+</span> m<span class="sh_symbol">,</span> idcmp<span class="sh_symbol">);</span> cnt <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(;</span> top<span class="sh_symbol">;</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">)</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> m<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		x <span class="sh_symbol">=</span> h<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>top<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>stack<span class="sh_symbol">[++</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> v<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
		stack<span class="sh_symbol">[</span>top <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>y <span class="sh_symbol">=</span> Tree<span class="sh_symbol">::</span><span class="sh_function">LCA</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]);</span> dep<span class="sh_symbol">[</span>stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]]</span> <span class="sh_symbol">&gt;</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">];</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">);</span>
		p<span class="sh_symbol">[</span>stack<span class="sh_symbol">[</span>top <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">]]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">!=</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>p<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">];</span> stack<span class="sh_symbol">[++</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> v<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
		p<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">];</span> stack<span class="sh_symbol">[++</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> v<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	std<span class="sh_symbol">::</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>v <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> v <span class="sh_symbol">+</span> <span class="sh_symbol">(</span>cnt <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">),</span> idcmp<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
