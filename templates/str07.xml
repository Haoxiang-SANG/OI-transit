<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/bootstrap.simplify.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>
	
<template>
<title>根据后缀自动机构造后缀树和后缀数组</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_comment">// the first line of extend(x) will be:</span>
<span class="sh_keyword">for</span><span class="sh_symbol">(</span>p <span class="sh_symbol">=</span> np<span class="sh_symbol">,</span> val<span class="sh_symbol">[</span>np <span class="sh_symbol">=</span> <span class="sh_symbol">++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> val<span class="sh_symbol">[</span>p<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> key<span class="sh_symbol">[</span>np<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> Key<span class="sh_symbol">;</span> p <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span>q<span class="sh_symbol">;</span> q <span class="sh_symbol">=</span> np<span class="sh_symbol">,</span> p <span class="sh_symbol">=</span> pa<span class="sh_symbol">[</span>p<span class="sh_symbol">]);</span>

<span class="sh_comment">// and then</span>
<span class="sh_type">void</span> <span class="sh_function">child_init</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> pos<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>used<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> i <span class="sh_symbol">=</span> <span class="sh_number">2</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> cnt<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(~</span>key<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
			<span class="sh_keyword">for</span><span class="sh_symbol">(</span>pos <span class="sh_symbol">=</span> n<span class="sh_symbol">,</span> j <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span> <span class="sh_symbol">!</span>used<span class="sh_symbol">[</span>j<span class="sh_symbol">];</span> j <span class="sh_symbol">=</span> pa<span class="sh_symbol">[</span>j<span class="sh_symbol">])</span><span class="sh_cbracket">{</span>
				pos <span class="sh_symbol">+=</span> val<span class="sh_symbol">[</span>pa<span class="sh_symbol">[</span>j<span class="sh_symbol">]]</span> <span class="sh_symbol">-</span> val<span class="sh_symbol">[</span>j<span class="sh_symbol">];</span>
				child<span class="sh_symbol">[</span>pa<span class="sh_symbol">[</span>j<span class="sh_symbol">]][</span>s<span class="sh_symbol">[</span>pos<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> <span class="sh_string">'a'</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> j<span class="sh_symbol">;</span>
				used<span class="sh_symbol">[</span>j<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
			<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span><span class="sh_symbol">(~</span>key<span class="sh_symbol">[</span>x<span class="sh_symbol">])</span> sa<span class="sh_symbol">[</span>sat<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> key<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">26</span><span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>child<span class="sh_symbol">[</span>x<span class="sh_symbol">][</span>i<span class="sh_symbol">])</span>
			<span class="sh_function">dfs</span><span class="sh_symbol">(</span>child<span class="sh_symbol">[</span>x<span class="sh_symbol">][</span>i<span class="sh_symbol">]);</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// and ranking array [0..n-1]</span>
<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> rk<span class="sh_symbol">[</span>sa<span class="sh_symbol">[</span>i<span class="sh_symbol">]]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span>

<span class="sh_comment">// and lcps</span>
<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span><span class="sh_cbracket">{</span>
	p <span class="sh_symbol">?</span> <span class="sh_symbol">--</span>p <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span><span class="sh_symbol">(!</span>rk<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> sa<span class="sh_symbol">[</span>rk<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">];</span> s<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> p<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> s<span class="sh_symbol">[</span>j <span class="sh_symbol">+</span> p<span class="sh_symbol">];</span> <span class="sh_symbol">++</span>p<span class="sh_symbol">);</span>
	ht<span class="sh_symbol">[</span>rk<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> p<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
<span class="sh_comment">// ht[i] is the lcp of sa[i] and sa[i+1]</span></code></pre>
</template>
