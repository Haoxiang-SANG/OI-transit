<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.template.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>
	
<template>
<title>最近公共祖先 (LCA) 的 ST 表算法</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">(</span><span class="sh_number">31</span> <span class="sh_symbol">-</span> <span class="sh_function">__builtin_clz</span><span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_comment">// if (__builtin_clz(x)) is can't be used, you can implement it in a table</span>

<span class="sh_type">int</span> cnt<span class="sh_symbol">,</span> id<span class="sh_symbol">[</span>maxV<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span><span class="sh_number">21</span><span class="sh_symbol">][</span>maxE<span class="sh_symbol">],</span> <span class="sh_symbol">*</span>ord <span class="sh_symbol">=</span> st<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">];</span>

<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">dmin</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>y<span class="sh_symbol">)</span><span class="sh_cbracket">{</span><span class="sh_keyword">return</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">?</span> x <span class="sh_symbol">:</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> i<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span>
    id<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> cnt<span class="sh_symbol">;</span>
    ord<span class="sh_symbol">[</span>cnt<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span>
    <span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span><span class="sh_cbracket">{</span>
        y <span class="sh_symbol">=</span> to<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
        <span class="sh_function">dfs</span><span class="sh_symbol">(</span>y<span class="sh_symbol">);</span> ord<span class="sh_symbol">[</span>cnt<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">build_st_table</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> <span class="sh_symbol">*</span>f<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>g <span class="sh_symbol">=</span> ord<span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> k <span class="sh_symbol">=</span> cnt<span class="sh_symbol">;</span>
    <span class="sh_keyword">for</span><span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j <span class="sh_symbol">+</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;=</span> cnt<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
        f <span class="sh_symbol">=</span> g<span class="sh_symbol">;</span> g <span class="sh_symbol">=</span> st<span class="sh_symbol">[</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">];</span> k <span class="sh_symbol">-=</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">);</span>
        <span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> k<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
            g<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">dmin</span><span class="sh_symbol">(</span>f<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> f<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">)]);</span>
    <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">LCA</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> L <span class="sh_symbol">=</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>id<span class="sh_symbol">[</span>x<span class="sh_symbol">],</span> id<span class="sh_symbol">[</span>y<span class="sh_symbol">]),</span> R <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>id<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">^</span> id<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">^</span> L<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> D <span class="sh_symbol">=</span> R <span class="sh_symbol">-</span> L<span class="sh_symbol">,</span> c <span class="sh_symbol">=</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>D<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span> <span class="sh_function">dmin</span><span class="sh_symbol">(</span>st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>L<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>R <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> c<span class="sh_symbol">)]);</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
