<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.template.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>
	
<template>
<title>Miller-Rabin 素数测试</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">const</span> ll p<span class="sh_symbol">[</span><span class="sh_number">6</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span><span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">,</span> <span class="sh_number">5</span><span class="sh_symbol">,</span> <span class="sh_number">7</span><span class="sh_symbol">,</span> <span class="sh_number">11</span><span class="sh_symbol">,</span> <span class="sh_number">13</span><span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_comment">// Miller Rabin primality test</span>
<span class="sh_comment">// return true if n is a 'prime', else return 0</span>
<span class="sh_type">bool</span> <span class="sh_function">Miller_Rabin</span><span class="sh_symbol">(</span>ll n<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span><span class="sh_symbol">(</span>n <span class="sh_symbol">==</span> <span class="sh_number">2</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span><span class="sh_symbol">(</span>n <span class="sh_symbol">&lt;</span> <span class="sh_number">2</span> <span class="sh_symbol">||</span> <span class="sh_symbol">!(</span>n <span class="sh_symbol">&amp;</span> <span class="sh_number">1</span><span class="sh_symbol">))</span> <span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
	<span class="sh_type">int</span> c<span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">;</span> ll s<span class="sh_symbol">,</span> u<span class="sh_symbol">,</span> v<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>c <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> s <span class="sh_symbol">=</span> n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> <span class="sh_symbol">!(</span>s <span class="sh_symbol">&amp;</span> <span class="sh_number">1</span><span class="sh_symbol">);</span> c<span class="sh_symbol">++,</span> s <span class="sh_symbol">&gt;&gt;=</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">6</span><span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span><span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(!(</span>n <span class="sh_symbol">%</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]))</span> <span class="sh_keyword">return</span> n <span class="sh_symbol">==</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
		u <span class="sh_symbol">=</span> <span class="sh_function">PowerMod</span><span class="sh_symbol">(</span>p<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> s<span class="sh_symbol">,</span> n<span class="sh_symbol">);</span>
		<span class="sh_keyword">for</span><span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;</span> c<span class="sh_symbol">;</span> j<span class="sh_symbol">++)</span><span class="sh_cbracket">{</span>
			v <span class="sh_symbol">=</span> <span class="sh_function">MulMod</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> u<span class="sh_symbol">,</span> n<span class="sh_symbol">);</span>
			<span class="sh_keyword">if</span><span class="sh_symbol">(</span>u <span class="sh_symbol">!=</span> <span class="sh_number">1</span> <span class="sh_symbol">&amp;&amp;</span> u <span class="sh_symbol">!=</span> n <span class="sh_symbol">-</span> <span class="sh_number">1</span> <span class="sh_symbol">&amp;&amp;</span> v <span class="sh_symbol">==</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
			u <span class="sh_symbol">=</span> v<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>v <span class="sh_symbol">!=</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
