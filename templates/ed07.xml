<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.simplify.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>

<template>
<title>快速数论变换 (Fast Number Theory Transform)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">typedef</span> <span class="sh_type">long</span> <span class="sh_type">long</span> ll<span class="sh_symbol">;</span>
<span class="sh_keyword">const</span> <span class="sh_usertype">ll</span><span class="sh_normal"> </span>mod <span class="sh_symbol">=</span> <span class="sh_number">998244353</span><span class="sh_symbol">,</span> root <span class="sh_symbol">=</span> <span class="sh_number">31</span><span class="sh_symbol">;</span>

<span class="sh_usertype">ll</span><span class="sh_normal"> </span><span class="sh_function">PowerMod</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>a<span class="sh_symbol">,</span> <span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_usertype">ll</span><span class="sh_normal"> </span>c <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> n<span class="sh_symbol">;</span> n <span class="sh_symbol">&gt;&gt;=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> a <span class="sh_symbol">=</span> a <span class="sh_symbol">*</span> a <span class="sh_symbol">%</span> mod<span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">&amp;</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> c <span class="sh_symbol">=</span> c <span class="sh_symbol">*</span> a <span class="sh_symbol">%</span> mod<span class="sh_symbol">;</span> <span class="sh_keyword">return</span> c<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">NTT_init</span><span class="sh_symbol">(</span><span class="sh_type">int</span> len<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>l <span class="sh_symbol">==</span> len<span class="sh_symbol">)</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span> n <span class="sh_symbol">=</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>l <span class="sh_symbol">=</span> len<span class="sh_symbol">);</span>
	<span class="sh_usertype">ll</span><span class="sh_normal"> </span>g <span class="sh_symbol">=</span> <span class="sh_function">PowerMod</span><span class="sh_symbol">(</span>root<span class="sh_symbol">,</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span><span class="sh_number">23</span> <span class="sh_symbol">-</span> l<span class="sh_symbol">));</span>
	<span class="sh_symbol">*</span>x <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> <span class="sh_symbol">*</span>rev <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
		x<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">[</span>i <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">*</span> g <span class="sh_symbol">%</span> mod<span class="sh_symbol">,</span> rev<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> rev<span class="sh_symbol">[</span>i <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">1</span> <span class="sh_symbol">|</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&amp;</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>l <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">DNTT</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">*</span>d<span class="sh_symbol">,</span> <span class="sh_type">int</span> <span class="sh_symbol">*</span>t<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>j<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>k<span class="sh_symbol">,</span> len <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> delta <span class="sh_symbol">=</span> n<span class="sh_symbol">,</span> R<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> t<span class="sh_symbol">[</span>rev<span class="sh_symbol">[</span>i<span class="sh_symbol">]]</span> <span class="sh_symbol">=</span> d<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> l<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		delta <span class="sh_symbol">&gt;&gt;=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>k <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> j <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">+</span> len<span class="sh_symbol">;</span> k <span class="sh_symbol">+=</span> delta<span class="sh_symbol">,</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">)</span> <span class="sh_symbol">*</span>j <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>k<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> t<span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;</span> t <span class="sh_symbol">+</span> n<span class="sh_symbol">;</span> j <span class="sh_symbol">+=</span> len <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">1</span><span class="sh_symbol">)</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>k <span class="sh_symbol">=</span> j<span class="sh_symbol">;</span> k <span class="sh_symbol">&lt;</span> j <span class="sh_symbol">+</span> len<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>k<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
				R <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>ll<span class="sh_symbol">)</span>y<span class="sh_symbol">[</span>k <span class="sh_symbol">-</span> j<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> k<span class="sh_symbol">[</span>len<span class="sh_symbol">]</span> <span class="sh_symbol">%</span> mod<span class="sh_symbol">;</span>
				k<span class="sh_symbol">[</span>len<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(*</span>k <span class="sh_symbol">-</span> R <span class="sh_symbol">&lt;</span> <span class="sh_number">0</span> <span class="sh_symbol">?</span> <span class="sh_symbol">*</span>k <span class="sh_symbol">-</span> R <span class="sh_symbol">+</span> mod <span class="sh_symbol">:</span> <span class="sh_symbol">*</span>k <span class="sh_symbol">-</span> R<span class="sh_symbol">);</span>
				<span class="sh_symbol">*</span>k <span class="sh_symbol">=</span> <span class="sh_symbol">(*</span>k <span class="sh_symbol">+</span> R <span class="sh_symbol">&gt;=</span> mod <span class="sh_symbol">?</span> <span class="sh_symbol">*</span>k <span class="sh_symbol">+</span> R <span class="sh_symbol">-</span> mod <span class="sh_symbol">:</span> <span class="sh_symbol">*</span>k <span class="sh_symbol">+</span> R<span class="sh_symbol">);</span>
			<span class="sh_cbracket">}</span>
		len <span class="sh_symbol">&lt;&lt;=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_symbol">*</span>B1<span class="sh_symbol">;</span>

<span class="sh_type">void</span> <span class="sh_function">Mul</span><span class="sh_symbol">(</span><span class="sh_type">int</span> deg<span class="sh_symbol">,</span> <span class="sh_type">int</span> <span class="sh_symbol">*</span>a<span class="sh_symbol">,</span> <span class="sh_type">int</span> <span class="sh_symbol">*</span>b<span class="sh_symbol">,</span> <span class="sh_type">int</span> <span class="sh_symbol">*</span>c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>deg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_symbol">*</span>c <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>ll<span class="sh_symbol">)*</span>a <span class="sh_symbol">*</span> <span class="sh_symbol">*</span>b <span class="sh_symbol">%</span> mod<span class="sh_symbol">;</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_function">NTT_init</span><span class="sh_symbol">(</span><span class="sh_function">lg2</span><span class="sh_symbol">(</span>deg<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">;</span> <span class="sh_usertype">ll</span><span class="sh_normal"> </span>iv <span class="sh_symbol">=</span> <span class="sh_function">PowerMod</span><span class="sh_symbol">(</span>n<span class="sh_symbol">,</span> mod <span class="sh_symbol">-</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
	<span class="sh_function">DNTT</span><span class="sh_symbol">(</span>a<span class="sh_symbol">,</span> c<span class="sh_symbol">);</span> <span class="sh_function">DNTT</span><span class="sh_symbol">(</span>b<span class="sh_symbol">,</span> B1<span class="sh_symbol">);</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> B1<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>ll<span class="sh_symbol">)</span>B1<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> c<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">%</span> mod<span class="sh_symbol">;</span>
	<span class="sh_function">DNTT</span><span class="sh_symbol">(</span>B1<span class="sh_symbol">,</span> c<span class="sh_symbol">);</span> std<span class="sh_symbol">::</span><span class="sh_function">reverse</span><span class="sh_symbol">(</span>c <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> c <span class="sh_symbol">+</span> n<span class="sh_symbol">);</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> c<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> c<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> iv <span class="sh_symbol">%</span> mod<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
