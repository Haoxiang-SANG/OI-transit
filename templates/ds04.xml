<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.template.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>
	
<template>
<title>树状数组 (封装)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> <span class="sh_function">lowbit</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">&amp;</span> <span class="sh_symbol">-</span>x<span class="sh_symbol">)</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">BIT</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> sz<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>x<span class="sh_symbol">;</span>
    <span class="sh_function">BIT</span> <span class="sh_symbol">():</span> <span class="sh_function">sz</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">=</span> NULL<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
    <span class="sh_symbol">~</span><span class="sh_function">BIT</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_keyword">if</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
    <span class="sh_type">void</span> <span class="sh_function">resize</span><span class="sh_symbol">(</span><span class="sh_type">int</span> size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>sz <span class="sh_symbol">=</span> size<span class="sh_symbol">;</span> <span class="sh_keyword">if</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">);</span> x <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span>sz <span class="sh_symbol">+</span> <span class="sh_number">5</span><span class="sh_symbol">];</span> <span class="sh_function">memset</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> sz <span class="sh_symbol">+</span> <span class="sh_number">5</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">2</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
    <span class="sh_type">int</span> <span class="sh_function">sum</span><span class="sh_symbol">(</span><span class="sh_type">int</span> h<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_type">int</span> s <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_keyword">if</span><span class="sh_symbol">(</span>h <span class="sh_symbol">&lt;=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span> s<span class="sh_symbol">;</span> <span class="sh_keyword">while</span><span class="sh_symbol">(</span>h<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>s <span class="sh_symbol">+=</span> x<span class="sh_symbol">[</span>h<span class="sh_symbol">];</span> h <span class="sh_symbol">-=</span> <span class="sh_function">lowbit</span><span class="sh_symbol">(</span>h<span class="sh_symbol">);</span><span class="sh_cbracket">}</span> <span class="sh_keyword">return</span> s<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
    <span class="sh_type">int</span> <span class="sh_function">range</span><span class="sh_symbol">(</span><span class="sh_type">int</span> l<span class="sh_symbol">,</span> <span class="sh_type">int</span> r<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">sum</span><span class="sh_symbol">(</span>r<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> <span class="sh_function">sum</span><span class="sh_symbol">(</span>l <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span> 
    <span class="sh_type">void</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> h<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">while</span><span class="sh_symbol">(</span>h <span class="sh_symbol">&lt;=</span> sz<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x<span class="sh_symbol">[</span>h<span class="sh_symbol">]</span> <span class="sh_symbol">+=</span> v<span class="sh_symbol">;</span> h <span class="sh_symbol">+=</span> <span class="sh_function">lowbit</span><span class="sh_symbol">(</span>h<span class="sh_symbol">);</span><span class="sh_cbracket">}}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</template>
