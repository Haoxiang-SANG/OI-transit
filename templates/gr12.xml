<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/bootstrap.template.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/sh_typical.min.css"?>
	
<template>
<title>最小费用最大流 (Dinic)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> <span class="sh_function">ad</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x <span class="sh_symbol">-</span> <span class="sh_number">1</span> <span class="sh_symbol">^</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">)</span>

<span class="sh_type">int</span> dep<span class="sh_symbol">[</span>maxV<span class="sh_symbol">],</span> cur<span class="sh_symbol">[</span>maxV<span class="sh_symbol">],</span> que<span class="sh_symbol">[</span>maxE<span class="sh_symbol">],</span> used<span class="sh_symbol">[</span>maxV<span class="sh_symbol">];</span>
<span class="sh_type">char</span> in_que<span class="sh_symbol">[</span>maxV<span class="sh_symbol">];</span>

<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">prv</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">--(</span>x <span class="sh_symbol">?</span> x <span class="sh_symbol">:</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">=</span> maxE<span class="sh_symbol">));</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">nxt</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">++</span>x <span class="sh_symbol">&gt;=</span> maxE <span class="sh_symbol">?</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> x<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_type">bool</span> <span class="sh_function">bfs</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> h <span class="sh_symbol">=</span> <span class="sh_number">34</span><span class="sh_symbol">,</span> t <span class="sh_symbol">=</span> <span class="sh_number">35</span><span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span>
    <span class="sh_function">memset</span><span class="sh_symbol">(</span>dep<span class="sh_symbol">,</span> <span class="sh_number">127</span><span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> dep<span class="sh_symbol">);</span>
    que<span class="sh_symbol">[</span>h<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> ti<span class="sh_symbol">;</span> dep<span class="sh_symbol">[</span>ti<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> in_que<span class="sh_symbol">[</span>ti<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">for</span><span class="sh_symbol">(;</span> h <span class="sh_symbol">!=</span> t<span class="sh_symbol">;</span> <span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
        x <span class="sh_symbol">=</span> que<span class="sh_symbol">[</span>h<span class="sh_symbol">];</span> in_que<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_function">nxt</span><span class="sh_symbol">(</span>h<span class="sh_symbol">);</span>
        <span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
            <span class="sh_keyword">if</span><span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>y <span class="sh_symbol">=</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>c <span class="sh_symbol">&amp;&amp;</span> e<span class="sh_symbol">[</span><span class="sh_function">ad</span><span class="sh_symbol">(</span>i<span class="sh_symbol">)].</span>f<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
                dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>c<span class="sh_symbol">;</span>
                <span class="sh_keyword">if</span><span class="sh_symbol">(!</span>in_que<span class="sh_symbol">[</span>y<span class="sh_symbol">])</span><span class="sh_cbracket">{</span>
                    in_que<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
                    <span class="sh_keyword">if</span><span class="sh_symbol">(</span>h <span class="sh_symbol">==</span> t <span class="sh_symbol">||</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;=</span> dep<span class="sh_symbol">[</span>que<span class="sh_symbol">[</span>h<span class="sh_symbol">]])</span> <span class="sh_cbracket">{</span>que<span class="sh_symbol">[</span>t<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span> <span class="sh_function">nxt</span><span class="sh_symbol">(</span>t<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
                    <span class="sh_keyword">else</span> que<span class="sh_symbol">[</span><span class="sh_function">prv</span><span class="sh_symbol">(</span>h<span class="sh_symbol">)]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span>
                <span class="sh_cbracket">}</span>
            <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span>
    <span class="sh_keyword">return</span> dep<span class="sh_symbol">[</span>si<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> INF<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> lim<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> a<span class="sh_symbol">,</span> c<span class="sh_symbol">,</span> f <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">if</span><span class="sh_symbol">(</span>x <span class="sh_symbol">==</span> ti <span class="sh_symbol">||</span> <span class="sh_symbol">!</span>lim<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> lim<span class="sh_symbol">;</span>
    used<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> 
    <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>i <span class="sh_symbol">=</span> cur<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span>
    <span class="sh_keyword">for</span><span class="sh_symbol">(;</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
        <span class="sh_keyword">if</span><span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>c <span class="sh_symbol">&amp;&amp;</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>f <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span>used<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">])</span><span class="sh_cbracket">{</span>
            a <span class="sh_symbol">=</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>lim <span class="sh_symbol">-</span> f<span class="sh_symbol">,</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>f<span class="sh_symbol">);</span>
            c <span class="sh_symbol">=</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">,</span> a<span class="sh_symbol">);</span>
            e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>f <span class="sh_symbol">-=</span> c<span class="sh_symbol">;</span> e<span class="sh_symbol">[</span><span class="sh_function">ad</span><span class="sh_symbol">(</span>i<span class="sh_symbol">)].</span>f <span class="sh_symbol">+=</span> c<span class="sh_symbol">;</span>
            <span class="sh_keyword">if</span><span class="sh_symbol">((</span>f <span class="sh_symbol">+=</span> c<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> lim<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> f<span class="sh_symbol">;</span>
        <span class="sh_cbracket">}</span>
    <span class="sh_keyword">return</span> f<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">Dinic</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
    <span class="sh_type">int</span> f<span class="sh_symbol">;</span>
    <span class="sh_keyword">for</span><span class="sh_symbol">(</span>cost <span class="sh_symbol">=</span> flow <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_function">bfs</span><span class="sh_symbol">();</span> <span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
        <span class="sh_function">memcpy</span><span class="sh_symbol">(</span>cur<span class="sh_symbol">,</span> first<span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> cur<span class="sh_symbol">);</span>
        <span class="sh_function">memset</span><span class="sh_symbol">(</span>used<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> used<span class="sh_symbol">);</span>
        flow <span class="sh_symbol">+=</span> f <span class="sh_symbol">=</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span>si<span class="sh_symbol">,</span> INT_MAX<span class="sh_symbol">);</span>
        cost <span class="sh_symbol">+=</span> dep<span class="sh_symbol">[</span>si<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> f<span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
